#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"


# Hide the top window
wm geometry . 1x1+0+0
wm overrideredirect . 1
wm transient . 


# Global constants
set Dir "/usr/local/data"
# all dicom files are saved in /usr/local/data/dcmImages
set ImageDir "$Dir/dcmImages"
set LoopCycle 2000
set SeriesDirs ""
set Counting 0
set NoOfFiles 0 
 


proc DevErrorWindow {{message "Unknown Error"}} {
    set oscaling [tk scaling]
    tk scaling 1
    tk_messageBox -title "Dicom" -icon error -message $message -type ok
    tk scaling $oscaling
}



proc DevInfoWindow {message} {
    set oscaling [tk scaling]
    tk scaling 1
    tk_messageBox -title "Dicom" -icon info -message $message -type ok
    tk scaling $oscaling
}



proc uniqkey {} {
    set key [expr { pow(2,31) + [clock clicks]}]
    set key [string range $key end-8 end-3]
    set key [clock seconds]$key
    return $key
}


proc sleep {ms} {
    set uniq [uniqkey]
    set ::__sleep__tmp__$uniq 0
    after $ms set ::__sleep__tmp__$uniq 1
    vwait ::__sleep__tmp__$uniq
    unset ::__sleep__tmp__$uniq
}



proc SortFiles {} {
    global Dir
    global ImageDir
    global LoopCycle
    global SeriesDirs
 

    # Dicom files currently available in the directory
    set files [glob -nocomplain -directory $imageDir *.*]
    set size [llength $files]
    if {$size > 0} {
        foreach f $files {
            # get image date
            set date [exec get_dicom_info -attvalue 0008 0023 $f]
            set year [string range $date 0 3]
            set month [string range $date 4 5]
            set day [string range $date 6 7]
            set datePart "$year-$month-$day"

            # get patient name 
            set name [exec get_dicom_info -pname $f]
            set names [split $name ","]
            set lName [string trim [lindex $names 0]]
            regsub -all " " $lName {.} lName 
            set fName [string trim [lindex $names 1]]
            regsub -all " " $fName {.} fName 
            set namePart $lName-$fName

            # make patient directory
            set patientDir $datePart-$namePart
            set abPatientDir "$dir/$patientDir"
            if {! [file exists $abPatientDir] || 
                ! [file isdirectory $abPatientDir]} {
                exec mkdir $abPatientDir

                if {! [file exists $abPatientDir]} {
                    DevErrorWindow "Couldn't create this directory: $abPatientDir"
                    exit
                }
            } 

            # make series directory
            set series [exec get_dicom_info -series $f]
            set series [string trim $series]
            set seriesDir "$abPatientDir/$series" 
            if {! [file exists $seriesDir] || 
                ! [file isdirectory $seriesDir]} {
                exec mkdir $seriesDir

                if {! [file exists $seriesDir]} {
                    DevErrorWindow "Couldn't create this directory: $seriesDir"
                    exit
                }

                lappend SeriesDirs $seriesDir
            } 

            # copy image to the series directory
            exec mv $f $seriesDir
        }
    }

    after $LoopCycle SortFiles 
}



proc CheckProgress {} {
    global SeriesDirs
    global LoopCycle
    global Counting
    global NoOfFiles

    set size [llength $SeriesDirs]
    if {$size > 0} {
        set imgDir [lindex $SeriesDirs 0]
        set files [glob -nocomplain -directory $imgDir *.*]
        set len [llength $files]
 
        if {$Counting} {
            if {$len == $NoOfFiles} {
                # done for this series
                # remove the first element
                set SeriesDirs [lreplace SeriesDirs 0 0]
                set Counting 0

                # give a message to the user
                DevInfoWindow "Dicom image transfer done for this series:\n$imgDir"
            } else {
                set NoOfFiles $len 
            }

        } else {
            set Counting 1
            set NoOfFiles $len 
        }
    }

    after $LoopCycle CheckProgress 
}



# Main loop
while {1} {

    if {! [file exists $Dir] || 
        ! [file isdirectory $Dir]} {
        DevErrorWindow "Directory doesn't exist: $Dir"
        exit
    }
    if {! [file exists $ImageDir] || 
        ! [file isdirectory $ImageDir]} {
        DevErrorWindow "Directory doesn't exist: $ImageDir"
        exit
    }

    SortFiles 
    CheckProgress
}

