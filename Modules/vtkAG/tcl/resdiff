167c167
<     
---
> 
173c173
<     #? or{}
---
>      #? or{}
221c221
<     
---
> 
224,226c224,226
< 	    {all <Shift-1> {AGBindingCallback Shift-1 %W %X %Y %x %y %t}} \
< 	    {all <Shift-2> {AGBindingCallback Shift-2 %W %X %Y %x %y %t}} \
< 	    {all <Shift-3> {AGBindingCallback Shift-3 %W %X %Y %x %y %t}} }
---
>         {all <Shift-1> {AGBindingCallback Shift-1 %W %X %Y %x %y %t}} \
>         {all <Shift-2> {AGBindingCallback Shift-2 %W %X %Y %x %y %t}} \
>         {all <Shift-3> {AGBindingCallback Shift-3 %W %X %Y %x %y %t}} }
356,358c356,358
<     #frame $f.fThreshold        -bg $Gui(activeWorkspace)
<     #frame $f.fIterations       -bg $Gui(activeWorkspace)
<     #frame $f.fNumberOfThreads  -bg $Gui(activeWorkspace)
---
>     frame $f.fThreshold        -bg $Gui(activeWorkspace)
>     frame $f.fIterations       -bg $Gui(activeWorkspace)
>     frame $f.fNumberOfThreads  -bg $Gui(activeWorkspace)
362,363c362,363
<     #  $f.fDimension  
<     #  $f.fTruncNegValues 
---
> #  $f.fDimension  
> #  $f.fTruncNegValues 
365,371c365,371
<     pack  $f.fIO $f.fRun -side top -padx 0 -pady 1 -fill x
<     #    $f.fThreshold  \
< 	    #   $f.fIterations \
< 	    #  $f.fNumberOfThreads \
< 	    # $f.fRun \
< 	    #-side top -padx 0 -pady 1 -fill x
<     #
---
>     pack  $f.fIO \
>       $f.fThreshold  \
>       $f.fIterations \
>       $f.fNumberOfThreads \
>           $f.fRun \
>       -side top -padx 0 -pady 1 -fill x
>     
385,387c385,387
<     #    lappend Volume(mbActiveList) $f.mbInputVol
<     #    lappend Volume(mActiveList)  $f.mbInputVol.m
<     
---
> #    lappend Volume(mbActiveList) $f.mbInputVol
> #    lappend Volume(mActiveList)  $f.mbInputVol.m
>  
391c391
<     #    set f $fMain.fResultVol
---
> #    set f $fMain.fResultVol
395c395
<     
---
> 
398,399c398,404
<     #    lappend Volume(mbActiveList) $f.mbResultVol
<     #    lappend Volume(mActiveList)  $f.mbResultVol.m
---
> #    lappend Volume(mbActiveList) $f.mbResultVol
> #    lappend Volume(mActiveList)  $f.mbResultVol.m
> 
>     #-------------------------------------------
>     # Parameters->Dimension frame
>     #-------------------------------------------
>     #set f $fMain.fDimension
401d405
<  	
402a407,433
>     #eval {label $f.l -text "Dimension:"\
>     #      -width 16 -justify right } $Gui(WLA)
>     #pack $f.l -side left -padx $Gui(pad) -pady 0
> 
>     # puts "WCA  $Gui(WCA)"
>     
>     #foreach value "2 3" width "5 5" {
>     #eval {radiobutton $f.r$value              \
>     #      -width $width                   \
>     #      -text "$value"                  \
>     #      -value "$value"                 \
>     #      -variable AG(Dimension)   \
>     #      -indicatoron 0                  \
>     #      -bg $Gui(activeWorkspace)       \
>     #      -fg $Gui(textDark)              \
>     #      -activebackground               \
>     #      $Gui(activeButton)              \
>     #      -highlightthickness 0           \
>     #      -bd $Gui(borderWidth)           \
>     #      -selectcolor $Gui(activeButton)
>     #    pack $f.r$value -side left -padx 2 -pady 2 -fill x
>     #
>     #}
>     #}
>     
> 
> 
403a435,476
>     # Parameters->Threshold Frame
>     #-------------------------------------------
>     set f $fMain.fThreshold
>     
>     
>     eval {label $f.lThreshold -text "Threshold:"\
>           -width 16 -justify right } $Gui(WLA)
>     eval {entry $f.eThreshold -justify right -width 6 \
>           -textvariable  AG(Threshold)  } $Gui(WEA)
>     grid $f.lThreshold $f.eThreshold -pady $Gui(pad) -padx $Gui(pad) -sticky e
>     grid $f.eThreshold  -sticky w
> 
> 
>     #-------------------------------------------
>     # Parameters->Iterations Frame
>     #-------------------------------------------
>     set f $fMain.fIterations
>     
>     
>     eval {label $f.lIterations -text "Iterations:"\
>           -width 16 -justify right } $Gui(WLA)
>     eval {entry $f.eIterations -justify right -width 6 \
>           -textvariable  AG(Iterations)  } $Gui(WEA)
>     grid $f.lIterations $f.eIterations \
>     -pady 2 -padx $Gui(pad) -sticky e
> 
> 
>     #-------------------------------------------
>     # Parameters->NumberOfThreads Frame
>     #-------------------------------------------
>     set f $fMain.fNumberOfThreads
>     
>     
>     eval {label $f.lNumberOfThreads -text "NumberOfThreads:"\
>           -width 16 -justify right } $Gui(WLA)
>     eval {entry $f.eNumberOfThreads -justify right -width 6 \
>           -textvariable  AG(NumberOfThreads)  } $Gui(WEA)
>     grid $f.lNumberOfThreads $f.eNumberOfThreads \
>     -pady 2 -padx $Gui(pad) -sticky e
> 
> 
>     #-------------------------------------------
409,412c482,487
<     #eval {label $f.lTruncNegValues -text "TruncNegValues:"    -width 16 -justify right } $Gui(WLA)
<     #eval {entry $f.eTruncNegValues -justify right -width 6 -textvariable  AG(TruncNegValues)  } $Gui(WEA)
<     #grid $f.lTruncNegValues $f.eTruncNegValues -pady 2 -padx $Gui(pad) -sticky e
<     
---
>     #eval {label $f.lTruncNegValues -text "TruncNegValues:"\
>           -width 16 -justify right } $Gui(WLA)
>     #eval {entry $f.eTruncNegValues -justify right -width 6 \
>           -textvariable  AG(TruncNegValues)  } $Gui(WEA)
>     #grid $f.lTruncNegValues $f.eTruncNegValues \
>     #-pady 2 -padx $Gui(pad) -sticky e
413a489
> 
436c512
<     
---
> 
439c515
<     
---
>      
442,448c518,524
<     #$f.linearRegistrationOptions configure  -font {helvetica 8} 
<     #$menuLRoptions configure -font {helvetica 8} 
<     # pack $f.linearRegistrationOptions -side top -pady $Gui(pad) -padx $Gui(pad) -expand 1 -fill x
<     # Use menu button.
<     
<     # constrain for linear registration.    
<     eval {label $f.lLR -text "Linear registration"} $Gui(WLA)
---
>    #$f.linearRegistrationOptions configure  -font {helvetica 8} 
>    #$menuLRoptions configure -font {helvetica 8} 
>   # pack $f.linearRegistrationOptions -side top -pady $Gui(pad) -padx $Gui(pad) -expand 1 -fill x
>  # Use menu button.
> 
> # constrain for linear registration.    
>    eval {label $f.lLR -text "Linear registration"} $Gui(WLA)
451c527
< 	    -menu $f.mbLR.m} $Gui(WMBA)
---
>         -menu $f.mbLR.m} $Gui(WMBA)
455,457c531,533
<     foreach v "{do not compute linear transformation} {translation} {rigid group} {similarity group} {affine group}" {
< 	$m add command -label $v -command "ModifyOption LinearRegistration {$v}"
<     }
---
>    foreach v "{do not compute linear transformation} {translation} {rigid group} {similarity group} {affine group}" {
>        $m add command -label $v -command "ModifyOption LinearRegistration {$v}"
>    }
460,463c536,539
<     grid $f.lLR  $f.mbLR -pady 2 -padx $Gui(pad) -sticky e
<     
<     
<     # warp and force
---
>    grid $f.lLR  $f.mbLR -pady 2 -padx $Gui(pad) -sticky e
> 
> 
> # warp and force
467c543
< 	    -menu $f.mbWarp.m} $Gui(WMBA)
---
>         -menu $f.mbWarp.m} $Gui(WMBA)
471,473c547,549
<     foreach v "{No warp} {Warp with force demons} {warp with force optical flow}" {
< 	$m add command -label $v -command "ModifyOption Warp {$v}"
<     }
---
>    foreach v "{No warp} {Warp with force demons} {warp with force optical flow}" {
>        $m add command -label $v -command "ModifyOption Warp {$v}"
>    }
477,478c553,554
<     
<     # Intensity transformation
---
> 
> # Intensity transformation
482c558
< 	    -menu $f.mbIntensityTFM.m} $Gui(WMBA)
---
>         -menu $f.mbIntensityTFM.m} $Gui(WMBA)
486,488c562,564
<     foreach v "{mono functional} {piecewise median} {no intensity transform}" {
< 	$m add command -label $v -command "ModifyOption IntensityTFM {$v}"
<     }
---
>    foreach v "{mono functional} {piecewise median} {no intensity transform}" {
>        $m add command -label $v -command "ModifyOption IntensityTFM {$v}"
>    }
491,492c567,568
<     
<     # Criterion
---
> 
> # Criterion
496c572
< 	    -menu $f.mbCriterion.m} $Gui(WMBA)
---
>         -menu $f.mbCriterion.m} $Gui(WMBA)
500,502c576,578
<     foreach v "{GCR L1 norm} {GCR L2 norm} {Correlation} {mutual information}" {
< 	$m add command -label $v -command "ModifyOption Criterion {$v}"
<     }
---
>    foreach v "{GCR L1 norm} {GCR L2 norm} {Correlation} {mutual information}" {
>        $m add command -label $v -command "ModifyOption Criterion {$v}"
>    }
505,507c581,583
<     
<     
<     # Verbose level
---
> 
> 
> # Verbose level
511c587
< 	    -menu $f.mbVerbose.m} $Gui(WMBA)
---
>         -menu $f.mbVerbose.m} $Gui(WMBA)
515,517c591,593
<     foreach v "0 1 2" {
< 	$m add command -label $v -command "ModifyOption Verbose {$v}"
<     }
---
>    foreach v "0 1 2" {
>        $m add command -label $v -command "ModifyOption Verbose {$v}"
>    }
520,521c596,597
<     
<     # checkbox type options:  not use SSD, 2D registration, estimate bias, last 6 channels of data are tensors
---
> 
> # checkbox type options:  not use SSD, 2D registration, estimate bias, last 6 channels of data are tensors
523c599
<     
---
>   
525,526c601,602
< 	    -text  "Use SSD" -variable AG(SSD) \
< 	    -width 20  -indicatoron 0 } $Gui(WCA)
---
>         -text  "Use SSD" -variable AG(SSD) \
>         -width 20  -indicatoron 0 } $Gui(WCA)
529c605
<     
---
>  
531c607
<     
---
>   
533,534c609,610
< 	    -text  "Estimate Bias" -variable AG(Use_bias) \
< 	    -width 20  -indicatoron 0 } $Gui(WCA)
---
>         -text  "Estimate Bias" -variable AG(Use_bias) \
>         -width 20  -indicatoron 0 } $Gui(WCA)
537,538c613,614
<     eval {label $f.l2DRegistration -text "2D registration:"} $Gui(WLA)
<     
---
>      eval {label $f.l2DRegistration -text "2D registration:"} $Gui(WLA)
>   
540,541c616,617
< 	    -text  "2D" -variable AG(2D) \
< 	    -width 20  -indicatoron 0 } $Gui(WCA)
---
>         -text  "2D" -variable AG(2D) \
>         -width 20  -indicatoron 0 } $Gui(WCA)
544c620
<     
---
> 
546c622
<     
---
>   
548,549c624,625
< 	    -text  "last 6 channels are tensors" -variable AG(Tensors) \
< 	    -width 20  -indicatoron 0 } $Gui(WCA)
---
>         -text  "last 6 channels are tensors" -variable AG(Tensors) \
>         -width 20  -indicatoron 0 } $Gui(WCA)
551a628,645
>    
> # entry type options
> 
>    eval {label $f.lScale -text "Scale factor:"} $Gui(WLA) 
>    eval {entry $f.eScale -justify right -width 20 -textvariable AG(Scale)} $Gui(WEA)
>    grid $f.lScale $f.eScale -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eScale  "Enter the scale factor to scale the intensities before registration."
>  
>    eval {label $f.lIteration_min -text "Iteration min:"} $Gui(WLA) 
>    eval {entry $f.eIteration_min -justify right -width 20 -textvariable AG(Iteration_min)} $Gui(WEA)
>    grid $f.lIteration_min $f.eIteration_min -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eIteration_min  "Enter the number of minumum iterations at each level."
>      
> 
>    eval {label $f.lIteration_max -text "Iteration max:"} $Gui(WLA) 
>    eval {entry $f.eIteration_max -justify right -width 20 -textvariable AG(Iteration_max)} $Gui(WEA)
>    grid $f.lIteration_max $f.eIteration_max -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eIteration_max  "Enter the number of maxmimum iterations at each level."
553,618c647,650
<     # entry type options
<     
<     eval {label $f.lScale -text "Scale factor:"} $Gui(WLA) 
<     eval {entry $f.eScale -justify right -width 20 -textvariable AG(Scale)} $Gui(WEA)
<     grid $f.lScale $f.eScale -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eScale  "Enter the scale factor to scale the intensities before registration."
<     
<     eval {label $f.lIteration_min -text "Iteration min:"} $Gui(WLA) 
<     eval {entry $f.eIteration_min -justify right -width 20 -textvariable AG(Iteration_min)} $Gui(WEA)
<     grid $f.lIteration_min $f.eIteration_min -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eIteration_min  "Enter the number of minumum iterations at each level."
<     
<     
<     eval {label $f.lIteration_max -text "Iteration max:"} $Gui(WLA) 
<     eval {entry $f.eIteration_max -justify right -width 20 -textvariable AG(Iteration_max)} $Gui(WEA)
<     grid $f.lIteration_max $f.eIteration_max -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eIteration_max  "Enter the number of maxmimum iterations at each level."
<     
<     eval {label $f.lDegree -text "Degree:"} $Gui(WLA) 
<     eval {entry $f.eDegree -justify right -width 20 -textvariable AG(Degree)} $Gui(WEA)
<     grid $f.lDegree $f.eDegree -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eDegree  "Enter the degree of polynomials."
<     
<     eval {label $f.lRatio -text "Ratio of points:"} $Gui(WLA) 
<     eval {entry $f.eRatio -justify right -width 20 -textvariable AG(Ratio)} $Gui(WEA)
<     grid $f.lRatio $f.eRatio -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eRatio  "Enter the ratio of points used for polynomial estimate."
<     
<     
<     eval {label $f.lLevel_min  -text "Min Level:"} $Gui(WLA) 
<     eval {entry $f.eLevel_min -justify right -width 20 -textvariable AG(Level_min)} $Gui(WEA)
<     grid $f.lLevel_min $f.eLevel_min -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eLevel_min  "Enter the minimum level in pyramid."
<     
<     eval {label $f.lLevel_max -text "Max Level:"} $Gui(WLA) 
<     eval {entry $f.eLevel_max -justify right -width 20 -textvariable AG(Level_max)} $Gui(WEA)
<     grid $f.lLevel_max $f.eLevel_max -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eLevel_max  "Enter the maximum level in pyramid."
<     
<     
<     eval {label $f.lNb_of_functions -text "Number of functions:"} $Gui(WLA) 
<     eval {entry $f.eNb_of_functions -justify right -width 20 -textvariable AG(Nb_of_functions)} $Gui(WEA)
<     grid $f.lNb_of_functions $f.eNb_of_functions -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eNb_of_functions  "Enter the number of intensity transformation functions."
<     
<     
<     
<     eval {label $f.lEpsilon -text "Epsilon:"} $Gui(WLA) 
<     eval {entry $f.eEpsilon -justify right -width 20 -textvariable AG(Epsilon)} $Gui(WEA)
<     grid $f.lEpsilon $f.eEpsilon -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eEpsilon  "Enter the maximum SSD value between successive iterations ."
<     
<     
<     eval {label $f.lStddev_min -text "Min Stddev:"} $Gui(WLA) 
<     eval {entry $f.eStddev_min -justify right -width 20 -textvariable AG(Stddev_min)} $Gui(WEA)
<     grid $f.lStddev_min $f.eStddev_min -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eStddev_min  "Enter the minimum standard deviation of displacement field smoothing kernel ."
<     
<     
<     eval {label $f.lStddev_max -text "Max Stddev:"} $Gui(WLA) 
<     eval {entry $f.eStddev_max -justify right -width 20 -textvariable AG(Stddev_max)} $Gui(WEA)
<     grid $f.lStddev_max $f.eStddev_max -pady 2 -padx $Gui(pad) -sticky e   
<     TooltipAdd $f.eStddev_max  "Enter the maximum standard deviation of displacement field smoothing kernel."
<     
<     
< }
---
>    eval {label $f.lDegree -text "Degree:"} $Gui(WLA) 
>    eval {entry $f.eDegree -justify right -width 20 -textvariable AG(Degree)} $Gui(WEA)
>    grid $f.lDegree $f.eDegree -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eDegree  "Enter the degree of polynomials."
619a652,655
>    eval {label $f.lRatio -text "Ratio of points:"} $Gui(WLA) 
>    eval {entry $f.eRatio -justify right -width 20 -textvariable AG(Ratio)} $Gui(WEA)
>    grid $f.lRatio $f.eRatio -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eRatio  "Enter the ratio of points used for polynomial estimate."
621a658,697
>    eval {label $f.lLevel_min  -text "Min Level:"} $Gui(WLA) 
>    eval {entry $f.eLevel_min -justify right -width 20 -textvariable AG(Level_min)} $Gui(WEA)
>    grid $f.lLevel_min $f.eLevel_min -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eLevel_min  "Enter the minimum level in pyramid."
> 
>    eval {label $f.lLevel_max -text "Max Level:"} $Gui(WLA) 
>    eval {entry $f.eLevel_max -justify right -width 20 -textvariable AG(Level_max)} $Gui(WEA)
>    grid $f.lLevel_max $f.eLevel_max -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eLevel_max  "Enter the maximum level in pyramid."
> 
> 
>    eval {label $f.lNb_of_functions -text "Number of functions:"} $Gui(WLA) 
>    eval {entry $f.eNb_of_functions -justify right -width 20 -textvariable AG(Nb_of_functions)} $Gui(WEA)
>    grid $f.lNb_of_functions $f.eNb_of_functions -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eNb_of_functions  "Enter the number of intensity transformation functions."
> 
> 
> 
>    eval {label $f.lEpsilon -text "Epsilon:"} $Gui(WLA) 
>    eval {entry $f.eEpsilon -justify right -width 20 -textvariable AG(Epsilon)} $Gui(WEA)
>    grid $f.lEpsilon $f.eEpsilon -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eEpsilon  "Enter the maximum SSD value between successive iterations ."
> 
>   
>    eval {label $f.lStddev_min -text "Min Stddev:"} $Gui(WLA) 
>    eval {entry $f.eStddev_min -justify right -width 20 -textvariable AG(Stddev_min)} $Gui(WEA)
>    grid $f.lStddev_min $f.eStddev_min -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eStddev_min  "Enter the minimum standard deviation of displacement field smoothing kernel ."
>  
> 
>    eval {label $f.lStddev_max -text "Max Stddev:"} $Gui(WLA) 
>    eval {entry $f.eStddev_max -justify right -width 20 -textvariable AG(Stddev_max)} $Gui(WEA)
>    grid $f.lStddev_max $f.eStddev_max -pady 2 -padx $Gui(pad) -sticky e   
>    TooltipAdd $f.eStddev_max  "Enter the maximum standard deviation of displacement field smoothing kernel."
> 
> 
> }
>  
> 
> 
640c716
< 	    
---
> 
655c731
< 		    
---
> 
677c753
< 	    
---
> 
680c756
< 	    switch $value {
---
> 	      switch $value {
700c776
< 	    
---
> 
703c779
< 	    switch $value {
---
> 	      switch $value {
709c785
< 		    
---
> 		
713c789
< 		    
---
> 		
717c793
< 		    
---
> 		  
723c799
< 	    
---
> 
726c802
< 	    switch $value {
---
> 	      switch $value {
732c808
< 		    
---
> 		
736,737d811
< 		    
< 		}
738a813,814
> 		}
> 
741c817
< 		    
---
> 		
745c821
< 		    
---
> 		  
873,874c949,950
< 	    ($AG(InputVolTarget) == $Volume(idNone)) || \
< 	    ($AG(ResultVol)   == $Volume(idNone))}  {
---
>           ($AG(InputVolTarget) == $Volume(idNone)) || \
>           ($AG(ResultVol)   == $Volume(idNone))}  {
877c953
<     }
---
> 	}
880,881c956,957
< 	    ($AG(InputVolTarget) == $AG(ResultVol)) || \
< 	    ($AG(InputVolMask)   == $AG(ResultVol))}  {
---
>           ($AG(InputVolTarget) == $AG(ResultVol)) || \
>           ($AG(InputVolMask)   == $AG(ResultVol))}  {
901c977
<     
---
> 
910c986
< 	Mrml(dataTree) InsertAfterItem $nodeBefore $node
---
>     Mrml(dataTree) InsertAfterItem $nodeBefore $node
916c992
< 	
---
>          
918c994
< 	set continue [DevOKCancel "Overwrite $v2name?"]
---
>     set continue [DevOKCancel "Overwrite $v2name?"]
922c998
< 	
---
>               
925c1001
<     
---
> 
979c1055
< 		for {set p 0} {$p < [[lindex $np $f] - 1]} {incr p}{
---
> 		for {set p 0} {$p <  [lindex $np $f]-1} {incr p}{
999c1075
<    #return tfm  
---
>    #return tfm
1009,1013c1085,1089
<     #def TransformScale(Target,Source,scale):   
<     #    log=vtkImageMathematics()
<     #    log.SetOperationToLog()
<     #    log.SetInput1(cast.GetOutput())
<     global AG Volume 
---
> #def TransformScale(Target,Source,scale):   
>    #    log=vtkImageMathematics()
>    #    log.SetOperationToLog()
>    #    log.SetInput1(cast.GetOutput())
>    global AG Volume 
1015,1017c1091,1093
<     if { $AG(Scale) <= 0} {
< 	return 0
<     }
---
>    if { $AG(Scale) <= 0} {
>     return 0
>    }
1019,1027c1095,1103
<     vtkImageMathematics div
<     div SetOperationToMultiplyByK
<     div SetConstantK  $AG(Scale)
<     div SetInput1 $Target
<     # [Volume($AG(InputVolTarget),vol) GetOutput]
<     div Update
<     # [Volume($AG(InputVolTarget),vol) GetOutput] DeepCopy [div GetOutput]
<     $Target  DeepCopy [div GetOutput]  
<     # or Volume($AG(InputVolTarget),vol) SetImageData [div GetOutput] , but maybe they share the same copy of data.
---
>    vtkImageMathematics div
>    div SetOperationToMultiplyByK
>    div SetConstantK  $AG(Scale)
>    div SetInput1 $Target
> # [Volume($AG(InputVolTarget),vol) GetOutput]
>    div Update
>   # [Volume($AG(InputVolTarget),vol) GetOutput] DeepCopy [div GetOutput]
>   $Target  DeepCopy [div GetOutput]  
>  # or Volume($AG(InputVolTarget),vol) SetImageData [div GetOutput] , but maybe they share the same copy of data.
1029,1033c1105,1109
<     div Delete
<     vtkImageMathematics div2
<     div2 SetOperationToMultiplyByK
<     div2 SetConstantK $AG(Scale)
<     # div2 SetInput1  [Volume($AG(InputVolSource),vol) GetOutput]
---
>    div Delete
>    vtkImageMathematics div2
>    div2 SetOperationToMultiplyByK
>    div2 SetConstantK $AG(Scale)
>   # div2 SetInput1  [Volume($AG(InputVolSource),vol) GetOutput]
1035,1040c1111,1116
<     div2 SetInput1  $Source
<     div2 Update
<     #[Volume($AG(InputVolSource),vol) GetOutput] DeepCopy [div2 GetOutput]
<     $Source  DeepCopy [div2 GetOutput]
<     div2 Delete
<     return 1
---
>    div2 SetInput1  $Source
>    div2 Update
>    #[Volume($AG(InputVolSource),vol) GetOutput] DeepCopy [div2 GetOutput]
>    $Source  DeepCopy [div2 GetOutput]
>    div2 Delete
>    return 1
1051c1127
<     global AG Volume Gui
---
>   global AG Volume Gui
1053c1129
<     puts "RunAG 1: Check Error"
---
>   puts "RunAG 1: Check Error"
1055,1057c1131,1133
<     if {[AGCheckErrors] == 1} {
< 	return
<     }
---
>   if {[AGCheckErrors] == 1} {
>       return
>   }
1059c1135
<     puts "RunAG 2: Prepare Result Volume"
---
>   puts "RunAG 2: Prepare Result Volume"
1061,1063c1137,1139
<     if {[AGPrepareResultVolume] == 1} {
< 	return
<     }
---
>   if {[AGPrepareResultVolume] == 1} {
>       return
>   }
1065,1068c1141,1144
<     vtkImageData Target 
<     Target DeepCopy   [ Volume($AG(InputVolTarget),vol) GetOutput]
<     vtkImageData Source
<     Source DeepCopy   [ Volume($AG(InputVolSource),vol) GetOutput]
---
>   vtkImageData Target 
>   Target DeepCopy   [ Volume($AG(InputVolTarget),vol) GetOutput]
>   vtkImageData Source
>   Source DeepCopy   [ Volume($AG(InputVolSource),vol) GetOutput]
1070,1075c1146,1151
<     set targetType  [Target  GetDataObjectType]
<     puts "Targert object type is $targetType"
<     set targetPointNum  [Target  GetNumberOfPoints]
<     puts "Targert object has   $targetPointNum points"
<     set targetCellNum  [Target  GetNumberOfCells]
<     puts "Targert object has   $targetCellNum cells"
---
>   set targetType  [Target  GetDataObjectType]
>   puts "Targert object type is $targetType"
>   set targetPointNum  [Target  GetNumberOfPoints]
>   puts "Targert object has   $targetPointNum points"
>   set targetCellNum  [Target  GetNumberOfCells]
>   puts "Targert object has   $targetCellNum cells"
1077,1082c1153,1158
<     set sourceType  [Source  GetDataObjectType]
<     puts "Source object type is $sourceType"
<     set sourcePointNum  [Source  GetNumberOfPoints]
<     puts "Source object has   $sourcePointNum points"
<     set sourceCellNum  [Source  GetNumberOfCells]
<     puts "Source object has   $sourceCellNum cells"
---
>   set sourceType  [Source  GetDataObjectType]
>   puts "Source object type is $sourceType"
>   set sourcePointNum  [Source  GetNumberOfPoints]
>   puts "Source object has   $sourcePointNum points"
>   set sourceCellNum  [Source  GetNumberOfCells]
>   puts "Source object has   $sourceCellNum cells"
1084,1089c1160,1165
<     #debug for the same input
<     vtkImageReader SReader
<     SReader SetFileName "TestVolSource.vtk"
<     SReader SetDataExtent 0  255 0 255 1 20
<     SReader Update
<     Source  DeepCopy [SReader GetOutput]
---
> #debug for the same input
> vtkImageReader SReader
> SReader SetFileName "TestVolSource.vtk"
> SReader SetDataExtent 0  255 0 255 1 20
> SReader Update
> Source  DeepCopy [SReader GetOutput]
1091,1095c1167,1171
<     vtkImageReader TReader
<     TReader SetFileName "TestVolTarget.vtk"
<     TReader SetDataExtent  0 255 0 255 1 20
<     TReader Update
<     Target DeepCopy [TReader GetOutput]
---
> vtkImageReader TReader
> TReader SetFileName "TestVolTarget.vtk"
> TReader SetDataExtent  0 255 0 255 1 20
> TReader Update
> Target DeepCopy [TReader GetOutput]
1100,1106c1176,1182
<     #Source DebugOn
<     #Target DebugOn
<     # Source Delete
<     # Target Delete
<     # return
<     #set input $AG(InputVol);
<     #set res $AG(ResultVol);
---
>   #Source DebugOn
>   #Target DebugOn
>  # Source Delete
>  # Target Delete
>  # return
>   #set input $AG(InputVol);
>   #set res $AG(ResultVol);
1108,1110c1184,1186
<     if {$AG(Scale) > 0 } {
< 	AGTransformScale Source Target 
<     }
---
>   if {$AG(Scale) > 0 } {
>        AGTransformScale Source Target 
>   }
1113,1114c1189,1190
<     #vtkIntensityTransform IntensityTransform 
<     vtkGeneralTransform Transform
---
>   #vtkIntensityTransform IntensityTransform 
>   vtkGeneralTransform Transform
1117,1124c1193,1200
<     if {$AG(Initial_tfm)} {      
< 	vtkGeneralTransformReader Reader
< 	Reader SetFileName $AG(Initial_tfm)
< 	Set Transform [Reader GetGeneralTransform]
< 	# How to use this intensity tranform, since it will be overwritten by the AGIntensity transform.
< 	Set IntensityTransform [Reader GetIntensityTransform]
< 	set  AG(Inentisy_transform) 1
<     } else {
---
>   if {$AG(Initial_tfm)} {      
>       vtkGeneralTransformReader Reader
>       Reader SetFileName $AG(Initial_tfm)
>       Set Transform [Reader GetGeneralTransform]
>    # How to use this intensity tranform, since it will be overwritten by the AGIntensity transform.
>       Set IntensityTransform [Reader GetIntensityTransform]
>       set  AG(Inentisy_transform) 1
>   } else {
1126,1128c1202,1204
< 	Transform PostMultiply 
< 	set  AG(Inentisy_transform) 0
<     }
---
>       Transform PostMultiply 
>       set  AG(Inentisy_transform) 0
>   }
1132c1208
<     if {$AG(Linear)} {
---
>   if {$AG(Linear)} {
1134,1145c1210,1221
< 	vtkImageGCR GCR
< 	GCR SetVerbose $AG(Verbose)
< 	GCR DebugOn
< 	#GCR SetTarget  [ Volume($AG(InputVolTarget),vol) GetOutput]
< 	#GCR SetSource [ Volume($AG(InputVolSource),vol) GetOutput]
< 	GCR SetTarget Target
< 	GCR SetSource Source
< 	[GCR GetGeneralTransform] SetInput Transform
< 	GCR SetCriterion $AG(GCR_criterion)
< 	GCR SetTransformDomain $AG(Linear_group)
< 	GCR SetTwoD $AG(2D)
< 	GCR Update
---
>       vtkImageGCR GCR
>       GCR SetVerbose $AG(Verbose)
>       GCR DebugOn
>       #GCR SetTarget  [ Volume($AG(InputVolTarget),vol) GetOutput]
>       #GCR SetSource [ Volume($AG(InputVolSource),vol) GetOutput]
>       GCR SetTarget Target
>       GCR SetSource Source
>       [GCR GetGeneralTransform] SetInput Transform
>       GCR SetCriterion $AG(GCR_criterion)
>       GCR SetTransformDomain $AG(Linear_group)
>       GCR SetTwoD $AG(2D)
>       GCR Update
1147c1223
< 	Transform Concatenate GCR
---
>       Transform Concatenate GCR
1149c1225
<     }
---
>   }
1151,1156c1227,1232
<     if {$AG(Warp)} {
< 	vtkImageWarp warp
< 	#warp SetSource    [Volume($AG(InputVolSource),vol) GetOutput]
< 	#warp SetTarget    [Volume($AG(InputVolTarget),vol) GetOutput]
< 	warp SetSource Source
< 	warp SetTarget Target 
---
>   if {$AG(Warp)} {
>       vtkImageWarp warp
>       #warp SetSource    [Volume($AG(InputVolSource),vol) GetOutput]
>       #warp SetTarget    [Volume($AG(InputVolTarget),vol) GetOutput]
>       warp SetSource Source
>       warp SetTarget Target 
1158c1234
< 	if { ($AG(InputVolMask)   != $Volume(idNone)) } {
---
>       if { ($AG(InputVolMask)   != $Volume(idNone)) } {
1160c1236
< 	    vtkImageData Mask
---
>          vtkImageData Mask
1162,1163c1238,1239
< 	    Mask DeepCopy  [ Volume($AG(InputVolMask),vol) GetOutput]
< 	    warp SetMask Mask
---
> 	 Mask DeepCopy  [ Volume($AG(InputVolMask),vol) GetOutput]
>          warp SetMask Mask
1165c1241
< 	}
---
>       }
1167c1243
< 	# Set the options for the warp
---
> # Set the options for the warp
1169c1245
< 	puts "RunAG 3"
---
>       puts "RunAG 3"
1171,1184c1247,1260
< 	#set warpGeneralTransform [warp GetGeneralTransform]
< 	#warpGeneralTransform SetInput Transform
< 	warp SetVerbose $AG(Verbose)
< 	[warp GetGeneralTransform] SetInput Transform
< 	warp SetResliceTensors $AG(Tensors)  
< 	warp SetForceType $AG(Force)   
< 	warp SetMinimumIterations  $AG(Iteration_min) 
< 	warp SetMaximumIterations $AG(Iteration_max)  
< 	warp SetMinimumLevel $AG(Level_min)  
< 	warp SetMaximumLevel $AG(Level_max)  
< 	warp SetUseSSD $AG(SSD)    
< 	warp SetSSDEpsilon  $AG(Epsilon)    
< 	warp SetMinimumStandardDeviation $AG(Stddev_min) 
< 	warp SetMaximumStandardDeviation $AG(Stddev_max) 
---
>  #set warpGeneralTransform [warp GetGeneralTransform]
>  #warpGeneralTransform SetInput Transform
>       warp SetVerbose $AG(Verbose)
>       [warp GetGeneralTransform] SetInput Transform
>       warp SetResliceTensors $AG(Tensors)  
>       warp SetForceType $AG(Force)   
>       warp SetMinimumIterations  $AG(Iteration_min) 
>       warp SetMaximumIterations $AG(Iteration_max)  
>       warp SetMinimumLevel $AG(Level_min)  
>       warp SetMaximumLevel $AG(Level_max)  
>       warp SetUseSSD $AG(SSD)    
>       warp SetSSDEpsilon  $AG(Epsilon)    
>       warp SetMinimumStandardDeviation $AG(Stddev_min) 
>       warp SetMaximumStandardDeviation $AG(Stddev_max) 
1186,1189c1262,1265
< 	#set Gui(progressText)     "executing one iteration"
< 	#warp SetStartMethod      MainStartProgress
< 	#warp SetProgressMethod  "MainShowProgress warp"
< 	#warp SetEndMethod        MainEndProgress
---
>       #set Gui(progressText)     "executing one iteration"
>       #warp SetStartMethod      MainStartProgress
>       #warp SetProgressMethod  "MainShowProgress warp"
>       #warp SetEndMethod        MainEndProgress
1191c1267
< 	puts "RunAG 4"
---
>       puts "RunAG 4"
1193,1194c1269,1270
< 	#warp SetNumberOfThreads     $AG(NumberOfThreads)
< 	#warp SetTruncNegValues      $AG(TruncNegValues)
---
>       #warp SetNumberOfThreads     $AG(NumberOfThreads)
>       #warp SetTruncNegValues      $AG(TruncNegValues)
1197,1199c1273,1275
< 	if {[AGIntensityTransform Source] == 0 } {
< 	    warp SetIntensityTransform $AG(tfm)
< 	}
---
>       if {[AGIntensityTransform Source] == 0 } {
> 	  warp SetIntensityTransform $AG(tfm)
>       }
1202,1204c1278,1280
< 	# This is necessary so that the data is updated correctly.
< 	# If the programmers forgets to call it, it looks like nothing
< 	# happened.
---
>       # This is necessary so that the data is updated correctly.
>       # If the programmers forgets to call it, it looks like nothing
>       # happened.
1206,1209c1282
< 	puts "RunAG 5"
< 	
< 	warp Update
< 	Transform Concatenate warp
---
>       puts "RunAG 5"
1211c1284,1285
< 	#Test to transform the source using the computed transform.
---
>       warp Update
>       Transform Concatenate warp
1213c1287,1289
< 	set None 0
---
> #Test to transform the source using the computed transform.
> 
>       set None 0
1215,1223c1291,1299
< 	set ResampleOptions(interp) 1
< 	set ResampleOptions(intens) 1
< 	set ResampleOptions(like) $None
< 	set ResampleOptions(inverse) 0
< 	set ResampleOptions(tensors) 0
< 	set ResampleOptions(xspacing) $None
< 	set ResampleOptions(yspacing) $None
< 	set ResampleOptions(zspacing) $None
< 	set ResampleOptions(verbose) 0
---
>       set ResampleOptions(interp) 1
>       set ResampleOptions(intens) 1
>       set ResampleOptions(like) $None
>       set ResampleOptions(inverse) 0
>       set ResampleOptions(tensors) 0
>       set ResampleOptions(xspacing) $None
>       set ResampleOptions(yspacing) $None
>       set ResampleOptions(zspacing) $None
>       set ResampleOptions(verbose) 0
1226,1233c1302,1310
< 	vtkImageCast Cast
< 	Cast SetInput Source
< 	Cast SetOutputScalarType [Source GetScalarType]
< 	if {$ResampleOptions(like) != $None} {
< 	    #     Cast SetOutputScalarType [LReader.GetOutput().GetScalarType())
< 	} else {
< 	    Cast SetOutputScalarType [Source GetScalarType]
< 	}
---
>       vtkImageCast Cast
>       Cast SetInput Source
>       Cast SetOutputScalarType [Source GetScalarType]
>       if {$ResampleOptions(like) != $None} {
> #     Cast SetOutputScalarType [LReader.GetOutput().GetScalarType())
>       }
>      else {
> 	 Cast SetOutputScalarType [Source GetScalarType]
>      }
1235c1312
< 	vtkImageTransformIntensity ITran
---
>      vtkImageTransformIntensity ITran
1237c1314
< 	ITrans SetInput [Cast GetOutput]
---
>       ITrans SetInput [Cast GetOutput]
1239,1247c1316,1318
< 	if  {$ResampleOptions(intens) == 1 } {
< 	    ITrans SetIntensityTransform [Transform GetIntensityTransform]
< 	}
<       
< 	if {$ResampleOptions(tensors) == 0} {
< 	    vtkImageReslice Reslicer
< 	} else {
< 	    vtkImageResliceST Reslicer
< 	}
---
>       if  {$ResampleOptions(intens) == 1 } {
> 	  ITrans SetIntensityTransform [Transform GetIntensityTransform]
>       }
1249,1250c1320,1324
< 	Reslicer SetInput [ITrans GetOutput]
< 	Reslicer SetInterpolationMode $ResampleOptions(interp)
---
>       if {$ResampleOptions(tensors) == 0} {
> 	  vtkImageReslice Reslicer
>       } else {
> 	  vtkImageResliceST Reslicer
>       }
1252,1257c1326,1327
< 	# Should it be this way, or inverse in the other way?     
< 	if {$ResampleOptions(inverse) == 1} {
< 	    Reslicer SetResliceTransform [Transform GetGeneralTransform]
< 	} else {
< 	    Reslicer SetResliceTransform [[TransforM GetGeneralTransform] GetInverse]
< 	}
---
>       Reslicer SetInput [ITrans GetOutput]
>       Reslicer SetInterpolationMode $ResampleOptions(interp)
1259,1264c1329,1334
< 	if  {$ResampleOptions(like) !=  $None} {
< 	    #	  Reslicer SetInformationInput [LReader GetOutput]
< 	}
< 	if {$ResampleOptions(xspacing) != $None} {
< 	    #	  Reslicer SetOutputSpacing {$ResampleOptions(xspacing),$ResampleOptions(yspacing),$ResampleOptions(zspacing)}
< 	}
---
> # Should it be this way, or inverse in the other way?     
>       if {$ResampleOptions(inverse) == 1} {
> 	  Reslicer SetResliceTransform [Transform GetGeneralTransform]
>       } else {
> 	  Reslicer SetResliceTransform [[TransforM GetGeneralTransform] GetInverse]
>       }
1266,1272c1336,1341
< 	#vtkImageData ResampleVolume
< 	[Volume($AG(ResultVol),vol) GetOutput]  DeepCopy [Reslicer GetOutput]
< 	#ResampleVolume DeepCopy [Reslicer GetOutput]
< 	
< 	Cast Delete
< 	Reslicer Delete
< 	ITrans Delete
---
>       if  {$ResampleOptions(like) !=  $None} {
> #	  Reslicer SetInformationInput [LReader GetOutput]
>       }
>       if {$ResampleOptions(xspacing) != $None} {
> #	  Reslicer SetOutputSpacing {$ResampleOptions(xspacing),$ResampleOptions(yspacing),$ResampleOptions(zspacing)}
>       }
1273a1343,1349
> #vtkImageData ResampleVolume
>       [Volume($AG(ResultVol),vol) GetOutput]  DeepCopy [Reslicer GetOutput]
> #ResampleVolume DeepCopy [Reslicer GetOutput]
>      
>       Cast Delete
>       Reslicer Delete
>       ITran Delete
1278,1281d1353
< 	set DataType [[warp GetDisplacementGrid] GetDataObjectType]
< 	puts " Transform displacementGrid, data type is $DataType"
< 	
< 	set dim_arr [[warp GetDisplacementGrid] GetDimensions]
1283,1284c1355,1361
< 	puts " Transform displacementGrid, dimensions:$dim_arr"
< 	
---
>       set DataType [[warp GetDisplacementGrid] GetDataObjectType]
>       puts " Transform displacementGrid, data type is $DataType"
> 
>       set dim_arr [[warp GetDisplacementGrid] GetDimensions]
> 
>       puts " Transform displacementGrid, dimensions:$dim_arr"
>       
1287c1364
< 	#set {extent_1 extent_2 extent_3 extent_4 extent_5 extent_6} [[warp GetDisplacementGrid] GetExtent]
---
>       #set {extent_1 extent_2 extent_3 extent_4 extent_5 extent_6} [[warp GetDisplacementGrid] GetExtent]
1289c1366
< 	set extent_arr [[warp GetDisplacementGrid] GetExtent]
---
>       set extent_arr [[warp GetDisplacementGrid] GetExtent]
1294,1295c1371,1372
< 	#parray extent_arr
< 	puts " Transform displacementGrid, extent:$extent_arr"
---
>       #parray extent_arr
>       puts " Transform displacementGrid, extent:$extent_arr"
1298,1299c1375,1376
< 	set ScalarSize [[warp GetDisplacementGrid] GetScalarSize]
< 	puts " Transform displacementGrid, ScalarSize is $ScalarSize"
---
>       set ScalarSize [[warp GetDisplacementGrid] GetScalarSize]
>       puts " Transform displacementGrid, ScalarSize is $ScalarSize"
1301,1302c1378,1379
< 	set ScalarType [[warp GetDisplacementGrid] GetScalarTypeAsString]
< 	puts " Transform displacementGrid, ScalarType is $ScalarType"
---
>       set ScalarType [[warp GetDisplacementGrid] GetScalarTypeAsString]
>       puts " Transform displacementGrid, ScalarType is $ScalarType"
1304,1306c1381,1383
< 	set ScalarComponents [[warp GetDisplacementGrid] GetNumberOfScalarComponents]
< 	puts " Transform displacementGrid,  $ScalarComponents  scalar comonents."
<     }
---
>       set ScalarComponents [[warp GetDisplacementGrid] GetNumberOfScalarComponents]
>       puts " Transform displacementGrid,  $ScalarComponents  scalar comonents."
>   }
1308,1309c1385,1386
<     # Write the output of the tranform
<     #vtkGeneralTransformWriter TransformWriter
---
> # Write the output of the tranform
>   #vtkGeneralTransformWriter TransformWriter
1311,1313c1388,1390
<     #TransformWriter SetGeneralTransform Transform
<     #TransformWriter SetIntensityTransform IntensityTransform
<     #TransformWriter SetFileName "test.tfm"
---
>   #TransformWriter SetGeneralTransform Transform
>   #TransformWriter SetIntensityTransform IntensityTransform
>   #TransformWriter SetFileName "test.tfm"
1315c1392
<     #TransformWriter Write
---
>   #TransformWriter Write
1317,1326c1394,1395
<     #Volume($res,vol) SetImageData [warp GetOutput]
<     #MainVolumesUpdate $res
<     
<     if {$AG(Warp)} {
< 	warp Delete
<     }
<     
<     if {$AG(Linear)} {
< 	GCR Delete
<     }
---
>   #Volume($res,vol) SetImageData [warp GetOutput]
>   #MainVolumesUpdate $res
1328,1329c1397,1399
<     Transform Delete
<     #IntensityTransform Delete
---
>   if {$AG(Warp)} {
>     warp Delete
>   }
1331,1335c1401,1403
<     Target Delete
<     Source Delete
<     if { ($AG(InputVolMask)   != $Volume(idNone)) } {
< 	Mask Delete
<     }
---
>   if {$AG(Linear)} {
>     GCR Delete
>   }
1337,1339c1405,1416
<     puts "RunAG 6"
<     
<     # warp UnRegisterAllOutputs
---
>   Transform Delete
>   #IntensityTransform Delete
> 
>   Target Delete
>   Source Delete
>   if { ($AG(InputVolMask)   != $Volume(idNone)) } {
>     Mask Delete
>   }
> 
>   puts "RunAG 6"
> 
>   # warp UnRegisterAllOutputs
