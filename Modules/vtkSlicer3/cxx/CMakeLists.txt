#
# Source files: DO NOT EDIT THIS FILE: edit CMakeListsLocal.txt instead.
#
#

SET (LOCAL_LIBRARY_BASENAME vtkSlicer3)

INCLUDE (${VTKSLICER3_SOURCE_DIR}/cxx/CMakeListsLocal.txt)

# --------------------------------------------------------------------------
# You probably do not need to modify anything below this line

#
# Create the vtkSlicer3 C++ library
#
# (Doesn't work here because of a CMake bug)
# ADD_LIBRARY (vtkSlicer3 LOCAL_MODULE_SRCS)

#
# Create the vtkSlicer3 Tcl library
#

IF (VTK_WRAP_TCL AND VTKSLICER3_WRAP_TCL)

  VTK_WRAP_TCL (vtkSlicer3TCL Slicer3TCL_SRCS LOCAL_MODULE_SRCS)
  ADD_LIBRARY (vtkSlicer3TCL Slicer3TCL_SRCS)
  TARGET_LINK_LIBRARIES (vtkSlicer3TCL 
                         vtkIOTCL 
                         vtkGraphicsTCL 
                         vtkImagingTCL 
                         vtkFilteringTCL 
                         vtkCommonTCL
                         ${TCL_LIBRARY})
  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkSlicer3TCL vtkHybridTCL)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkSlicer3TCL vtkParallelTCL)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkSlicer3TCL vtkPatentedTCL)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkSlicer3TCL vtkRenderingTCL)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_TCL AND VTKSLICER3_WRAP_TCL)

#
# Create the vtkSlicer3 Python library
#

IF (VTK_WRAP_PYTHON AND VTKSLICER3_WRAP_PYTHON)

  VTK_WRAP_PYTHON (vtkSlicer3Python Slicer3Python_SRCS LOCAL_MODULE_SRCS)

  IF (APPLE)
    ADD_LIBRARY (vtkSlicer3Python MODULE Slicer3Python_SRCS)
  ELSE (APPLE)
    ADD_LIBRARY (vtkSlicer3Python SHARED Slicer3Python_SRCS)
  ENDIF (APPLE)

  IF (WIN32)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python 
                           vtkIOPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython
                           debug ${PYTHON_DEBUG_LIBRARY} 
                           optimized ${PYTHON_LIBRARY})
  ELSE (WIN32)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python 
                           vtkIOPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython
                           ${PYTHON_LIBRARY})
  ENDIF (WIN32)

  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python vtkHybridPython)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python vtkParallelPython)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python vtkPatentedPython)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkSlicer3Python vtkRenderingPython)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_PYTHON AND VTKSLICER3_WRAP_PYTHON)

#
# Create the vtkSlicer3 Java library
#

IF (VTK_WRAP_JAVA AND VTKSLICER3_WRAP_JAVA)

  VTK_WRAP_JAVA (vtkSlicer3Java Slicer3Java_SRCS LOCAL_MODULE_SRCS)
  ADD_LIBRARY (vtkSlicer3Java SHARED Slicer3Java_SRCS)
  TARGET_LINK_LIBRARIES (vtkSlicer3Java 
                         vtkIOJava
                         vtkGraphicsJava
                         vtkImagingJava 
                         vtkFilteringJava
                         vtkCommonJava)
  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkSlicer3Java vtkHybridJava)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkSlicer3Java vtkParallelJava)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkSlicer3Java vtkPatentedJava)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkSlicer3Java vtkRenderingJava)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_JAVA AND VTKSLICER3_WRAP_JAVA)

#
# Link to VTK and local
#

LINK_LIBRARIES (
  vtkSlicer3
  vtkIO
  vtkGraphics
  vtkImaging 
  vtkFiltering
  vtkCommon
)

IF (VTK_USE_HYBRID)
  LINK_LIBRARIES (vtkHybrid)
ENDIF (VTK_USE_HYBRID)

IF (VTK_USE_PARALLEL)
  LINK_LIBRARIES (vtkParallel)
ENDIF (VTK_USE_PARALLEL)

IF (VTK_USE_PATENTED)
  LINK_LIBRARIES (vtkPatented)
ENDIF (VTK_USE_PATENTED)

IF (VTK_USE_RENDERING)
  LINK_LIBRARIES (vtkRendering)
ENDIF (VTK_USE_RENDERING)
